<Req>: I have a service console with a custom component sidebar (VF Page called Case_Contact_Sidebar) with 4 tabs. I would like another tab created called "Schedule" which will bring up a view of Service Agents' calendars, enabling the service user to book an appointment. 
The URL for the calendar is "https://ap1.salesforce.com/apex/fullcalGroup?sfdc.tabName=01r90000000Bfeo" 

When the service user chooses a time (be clicking on the time slot), the "who" should pre-populate with the contact name. 




<!--	--Page--	-->

<apex:page standardController="Contact" extensions="fullcalUser" sidebar="false"  showHeader="false"  >

    <apex:stylesheet value="{!URLFOR($Resource.fullcalendar_148, '/css/light-blue/jquery-ui-1.8.6.custom.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.fullcalendar_148, '/fullcalendar/fullcalendar.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.fullcalendar_148, '/qtip/dist/jquery.qtip.css')}" />

    <script type='text/javascript' src="{!URLFOR($Resource.fullcalendar_148,'/jquery/jquery-1.4.3.min.js')}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.fullcalendar_148, '/jquery/jquery-ui-1.8.6.custom.min.js')}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.fullcalendar_148, '/jquery/jquery_ba_dotimeout.js')}"></script>
    <script type='text/javascript' src="{!URLFOR($Resource.fullcalendar_JS)}"  ></script>
    <script type="text/javascript" src="{!URLFOR($Resource.fullcalendar_148, '/qtip/dist/jquery.qtip.js')}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.fullcalendar_148, '/jquery/jquery.tmpl.js')}"></script>

    <apex:include pageName="fullcalUtil_JS" />

    <apex:form >

        <div id="errors"><apex:pageMessages id="errorMsgs" /></div>

        <div id='loading'>loading...</div>
        <table id='main_table'> 
        <tbody> 
            <tr>
            <td>
                <div id='miniCalendar'></div>
                 
                <div class="ui-widget">
                    <label for="selectedGroup"><h3>Group: </h3></label>
                    <input id="selectedGroup" value="{!selectedGroup.name}"/>
                    
                    <apex:outputPanel id="userListSelect" >
                    <a href="/{!selectedGroup.id}" >
                        <!--  NOTE: this uses mouseOverInfoOuter and addMouseOver(), behavior that comes from salesforce internal methods to put, 
                                up a tooltip this should be done with qTip() in the future 
                            -->
                        <div onmouseover="addMouseOver(this)" onfocus="addMouseOver(this)" class="mouseOverInfoOuter" 
                            style="padding-right:10px;" ><img title="" 
                            class="chatterGroupIcon" alt="" src="/s.gif" /><div style="display: none; opacity: 0;" class="mouseOverInfo">
                                click to navigate to Chatter Group {!selectedGroup.name}</div></div>
                    </a>
                    </apex:outputPanel>
                </div>
                
                
                <apex:outputPanel id="userList" >
                    <div class="ui-user-list " >
                    <apex:repeat value="{!Users}" var="u" >
                        <div class="ui-user-item" >
                        
                            <a href="/{!u.u.id}" >
                                <img    title="{!u.u.name}"  alt="{!u.u.name}"  src="{!u.u.SmallPhotoUrl}" /></a>
                                
                            <span class="ui-user-item-body "  >
                            
                                <input type="checkbox" id="check{!u.u.id}" alt="{!u.u.id}" checked="checked" 
                                    class="user-selected  " 
                                    onchange="userCheckBoxChange(this,'{!u.u.id}');" />
                                
                                <label class="{!u.classname}" for="check{!u.u.id}" 
                                    style="background-color:{!u.backgroundcolor}; border-color:{!u.backgroundcolor}; color:{!u.color}" >
                                    {!u.u.name}
                                </label>
                                <a href="#" onclick="window.open('/apex/fullcalColorSettings?id={!u.u.id}', 'gcalevent', 'width=453,height=310' );">
                                    <span class="ui-icon ui-icon-gear" alt="Color" >Set Color</span>
                                </a>
                            </span>                             
                        </div>
                        
                    </apex:repeat>
                    </div>
                    <!--  NOTE: this uses mouseOverInfoOuter and addMouseOver(), behavior that comes from salesforce internal methods to put, 
                            up a tooltip this should be done with qTip() in the future 
                        -->                    
                    <div onmouseover="addMouseOver(this)" onfocus="addMouseOver(this)" class="mouseOverInfoOuter">
                        <img title="" class="infoIcon" alt="" src="/s.gif" /><div style="display: none; opacity: 0;" class="mouseOverInfo">
                        The first user in this list is the default user for new events. Drag users to sort this list.</div>
                    </div>
                    
                </apex:outputPanel>
                        
                <div class="ui-widget" style="margin-top:2em; font-family:Arial; display:none;">js debug log :
                    <div id="log" style="height: 300px; width: 220px; overflow: auto;" class="ui-widget-content"></div>
                </div>

            </td>
            
            <td><div id='calendar'></div></td>
                
            </tr>
        </tbody>
        </table>

        <apex:actionFunction name="selectedGroup" action="{!selectedGroup}" 
                onComplete="loadUserEvents();" 
                rerender="errorMsgs,userList,userListSelect, hoverNewTemplatePanel"> 
            <apex:param name="groupId" value="" /> 
        </apex:actionFunction>
        
        <apex:actionFunction name="updateViewDisplay" action="{!viewDisplay}" onComplete="" rerender="">
            <apex:param name="view" value="" />
        </apex:actionFunction>
        
        <apex:actionFunction name="saveMove" onComplete="fadeOutErrors();" action="{!updateEventMove}" rerender="errorMsgs">
            <apex:param name="eventId" value="" />
            <apex:param name="dayDelta" value="" />
            <apex:param name="minuteDelta" value="" />
        </apex:actionFunction>
        
        <apex:actionFunction name="changeEventOwner" action="{!changeEventOwner}" onComplete="changeEventOwnerDone();fadeOutErrors();" rerender="errorMsgs">
            <apex:param name="eventId" value="" />
            <apex:param name="ownerId" value="" />
        </apex:actionFunction>


        <apex:actionFunction name="saveResize" action="{!updateEventResize}" onComplete="fadeOutErrors();" rerender="errorMsgs">
            <apex:param name="eventId" value="" />
            <apex:param name="dayDelta" value="" />
            <apex:param name="minuteDelta" value="" />
        </apex:actionFunction>

        <apex:actionFunction name="insertNewEvent" action="{!insertNewEvent}" onComplete="renderNewEvent();" rerender="errorMsgs">
            <apex:param name="title" value="" />
            <apex:param name="start" value="" />
            <apex:param name="end" value="" />
            <apex:param name="allDay" value="" />
            <apex:param name="ownerId" value="" />
            <apex:param name="whoId" value="" />
        </apex:actionFunction>
        
        <apex:actionFunction name="deleteEventById" 
                onComplete="fadeOutErrors();jQuery('#calendar').fullCalendar('refetchEvents');" 
                action="{!deleteEventById}" rerender="errorMsgs">
            <apex:param name="eventId" value="" />
            <apex:param name="ownerId" value="" />
        </apex:actionFunction>

        <apex:actionFunction name="saveNewDefaultOwner" 
                onComplete="fadeOutErrors();" 
                action="{!saveNewDefaultOwner}" 
                rerender="errorMsgs,  hoverNewTemplatePanel">
            <apex:param name="ownerId" value="" />
        </apex:actionFunction>
   

<apex:outputPanel id="hoverNewTemplatePanel" ><div style="display:none;" >
<div id="hoverNewTemplate" >

    <div class="bPageBlock secondaryPalette newEvent" >
            <div class="pbHeader">
            <table cellspacing="0" cellpadding="0" border="0">
                <tbody>
                    <tr>
                        <td class="pbTitle">
                        <h2 class="mainTitle">New Event</h2>
                        </td>
                        <td class="pbButton"><input type="button" title="Create"
                            name="Create" class="btn" value=" Create "
                            onclick="javascript:saveNewEvent(this,${start},${end},${allDay});"
                            alt="${id}" /> <input type="button" title="Cancel" name="cancel"
                            class="btn" value="Cancel"
                            onclick="jQuery('#calendar').qtip('hide');" alt="${id}" /></td>
                    </tr>
                </tbody>
            </table>

            </div>
            <div class="pbBody"><div class="pbSubsection">
            
            <table cellspacing="0" cellpadding="0" border="0" class="detailList"><tbody>
                <tr>
                    <td class="labelCol">Subject</td><td class="dataCol">
                    <input id="newEventSubject" ></input></td>
                </tr>
            
                <tr><td class="labelCol">Who</td><td class="dataCol"><input id="newEventWho" value="{!getWhoId}" ></input>
                <apex:inputHidden id="newEventWho" value="{!getWhoId}"/>
                <!-- <input id="newEventWhoId" type="hidden"></input> -->
                </td></tr>      
                
                <tr>
                    <td class="labelCol">Assigned To</td><td class="dataCol">
                    <select class="assignedTo">
                        <apex:repeat value="{!Users}" var="u" >  
                            <option  value="{!u.u.id}" >{!u.u.name}</option>
                        </apex:repeat>
                    </select>   
                    </td>
                </tr>       
            
                <tr><td class="labelCol">Start Time</td><td class="dataCol">${startFormat}</td></tr>        
                <tr><td class="labelCol">End Time</td><td class="dataCol">${endFormat}</td></tr>
                
            </tbody></table>
        
        </div></div>
    </div>

</div>
</div></apex:outputPanel>

    </apex:form> 

<script type='text/javascript'>    jQuery.noConflict();
   
    function changeEventOwnerDone() { 
        // reload a single event, with it's owner, hard
        // reload the events for all users, simple
        jQuery('#calendar').fullCalendar('refetchEvents');
    }
    
    function renderNewEvent() { 
        // reload a single event, with it's owner, hard
        // reload the events for all users, simple
        jQuery('#calendar').fullCalendar('refetchEvents');
    }
        
        
    function loadUserEvents() {
        // trigger onchange event to load each calendar
        jQuery('.ui-user-item input').change();  
        
        // sortable makes them draggable also
        jQuery('.ui-user-list').sortable({placeholder: "ui-state-highlight",
            stop: function(event, ui) { // post new owner to controller, de-bounce?
                var id = jQuery(ui.item).find('input').attr('alt');
                // only if this is the top one
                var topid = getFirstUserId();
                if ( topid == id ) 
                    saveNewDefaultOwner(id);
            }
        }).disableSelection();
        
        /* done in markup
        jQuery('.ui-user-list')
            .parent()
            .append('<div onmouseover="addMouseOver(this)" onfocus="addMouseOver(this)" class="mouseOverInfoOuter"><img title="" class="infoIcon" alt="" src="/s.gif" /><div style="display: none; opacity: 0;" class="mouseOverInfo">The first user in this list is the default user for new events. Drag users to sort this list.</div></div>');
        */
        
        // reload the styles for users who may be new
        appendUserStyles('.ui-user-list .ui-user-item-body label');  
    }
    
    function userCheckBoxChange(ele,userid) { // filter in or out events with this user id
        var action = ( jQuery(ele).attr('checked') ? 'addEventSource':  'removeEventSource');
        jQuery('#calendar').fullCalendar( action,   '/apex/fullcalUserData?id='+userid ); 
         
    } 
     
    jQuery(document).ready(function() {
    
        /* not used
        jQuery('.protoEvent').draggable({   distance: 30,   zIndex: 999, revert: true,revertDuration: 0, cursorAt: { top: 0 }                                     }); 
        */
        
        jQuery( "#selectedGroup" ).autocomplete({   source: "groupSearch",     minLength: 2,
            select: function( event, ui ) {
                log( ui.item ?
                    "Selected: " + ui.item.id :
                    "Nothing selected, input was " + this.value );
              
                if ( ui.item == null ) return;
                
                // clean up all event sources
                jQuery('.ui-user-list input').each( function (idx,val) { 
                    var userid = jQuery(val).attr('alt');
                    jQuery('#calendar').fullCalendar( 'removeEventSource', '/apex/fullcalUserData?id='+userid );
                });
                
                selectedGroup( ui.item.id );    // call apex to select the group and reload the calendar
                
            }
        });
          
        jQuery('#miniCalendar').datepicker({            dateFormat: 'DD, d MM, yy',
            onSelect: function(dateText,dp){
                jQuery('#calendar').fullCalendar('gotoDate',new Date(Date.parse(dateText)));
                jQuery('#calendar').fullCalendar('changeView','agendaDay');
            }
        });
     
        var theView = getSettingValue("{!recentView}","agendaDay"); // get default from custom settings
        
        var theDropTarget = null;
        
        theCal = jQuery('#calendar').fullCalendar({ 
            
            height: 700,
            defaultEventMinutes: 15,
            slotMinutes: 15,        
            defaultView: theView,  
            firstHour: 9,
            theme: true,
            lazyFetching: true,
             
            timeFormat: {               agenda: 'h:mm{ - h:mm}',                '': 'h(:mm)t'           } ,
            allDaySlot: false,
            header: {
                left: 'prev,next today',
                center: 'title',
                right: 'month,agendaWeek,agendaDay'
            },
            
            loading: function(bool,view) {
                if (bool) {             
                    jQuery('#loading').show();
                } else {
                    jQuery('#loading').fadeOut('fast');
                }
            },
            
            /* mouse overs - not used 
            eventMouseover:  function ( event, jsEvent, view ) {        
                log( 'eventMouseover ' + event.start );         
                theDropTarget = event;  
            },
            eventMouseout:  function ( event, jsEvent, view ) {             
                log( 'eventMouseout '+ event.start);
                theDropTarget = null;           
            },
            */
            eventRender: eventRender,
            
            /* 
             * when qtip comes up and we drag an event 
             * the qtip may stay up and become disconnected
             * instead hide and disable on drag start and enable when drag stops
             */
            eventDragStart: function( event, jsEvent, ui, view ) { 
                ui.helper.qtip('hide');
                ui.helper.qtip('disable');
            },
            eventDragStop: function( event, jsEvent, ui, view ) { 
                ui.helper.qtip('enable');
            },
            
            eventDrop: function(event, dayDelta, minuteDelta,allDay,revertFunc) {
                if ( event.isViewMore != null ) { 
                    revertFunc();
                    return;
                }
                saveMove(event.id,dayDelta,minuteDelta);
            },
            
            eventResize: function(event,dayDelta,minuteDelta,revertFunc) {
                saveResize(event.id,dayDelta,minuteDelta);
                
            },
            
            selectable: true,
            selectHelper: true,
            select:     newEventPopup,
                        
            dayClick: function(date, allDay, jsEvent, view) {
            
               if (allDay) {
                    log('Clicked on the entire day: ' + date);
                }else{
                    log('Clicked on the slot: ' + date);
                }
                
                log('Coordinates: ' + jsEvent.pageX + ',' + jsEvent.pageY);
                
                log('Current view: ' + view.name);
                
                // change the day's background color just for fun
                //jQuery(this).css('background-color', 'red');
            },          
            
            eventClick: function(event, view) {
                log( view.toString() + ' ' + event.toString() );
                
                if ( event.isViewMore != null ) { 
                    // switch to the day view on the date of this event
                    theCal.fullCalendar('changeView','agendaDay' );
                    theCal.fullCalendar('gotoDate', event.start );
                    return false;
                }
               
                // opens events in a popup window
                // window.open(event.url, 'gcalevent', 'width=433,height=285');
                
                // navigate to that url
                window.location.href = event.url; 
                return false;
            },
            
            viewDisplay:  function(view) { // The calendar's date-range changes whenever the user switches to a new view 
                if ( theView != view.name ) { 
                    theView = view.name;
                    jQuery.doTimeout( 'id', 2000, function() { // debounce a few seconds
                        updateViewDisplay(theView); // save out to custom settings
                    }, true);
                }
                
            },

            /* 
             * this function is called when something is dropped onto the calendar from the outside
             *
            droppable: true, 
            drop: function(date, allDay, ev, ui) { 
                var k = theCal;
                var v = theView;
                var j = date;
                var ui = ui;
            },
            */
                
            editable: true
        
        }); // end fullcalendar()
        
        
        /*  in case we want to jump to a date from a url param
         * jQuery('#calendar').fullCalendar('gotoDate',new Date(2010,3,1) );
         * 
         */
        
        appendUserStyles('.ui-user-list .ui-user-item-body label');  
        
        loadUserEvents();   // starts the data loads, one per user 
                
    }); // end document ready
    
    
    /* Helper functions
     * -----------------------------------------------------------------------------
     * 
     */
        
    function eventRender(event, element, view) {
        
        if ( view.name == 'month' ) { 
            var sameDayList = view.eachElementOnDay(event)  ; 
             
            if ( sameDayList != undefined && sameDayList.length == 5 ) {
            
                // this event now marks a jump to date on click
            
                var html = '<a><span class="fc-event-time"></span><span class="fc-event-title"> more ';
                html += '</span></a>';
                jQuery(element).html(html);
                event.isViewMore = true; 
                
                // this event should not be draggable...
                
            }
            if (sameDayList != undefined && sameDayList.length > 5 ) {
                return false;
            }
        } // month view
        
        // append who to the event title in the UI 
        if (event.who != '' ) {
            var j = jQuery(element).find('.fc-event-title');
            j.text( j.text() + ' | ' + event.who  );
        }
        
        // allow users to be dropped onto events, change the owner of that event
        if ( ! event.isViewMore ) {
            
            jQuery( element ).droppable({ 
                accept: '.ui-user-item', // allow others ? events onto events ? whoid?
                greedy: true ,  
                hoverClass: 'ui-droppable-highlight',   
                tolerance: 'pointer',
                drop: function( jsevent, ui) { 
                    var newOwner = ui.draggable.find('input').attr('alt');
                    log( newOwner + ' dropped onto event '+event.id); 
                    
                    // TODO add a waiting image to the event
                    jQuery(element).fadeOut(3000);
                    
                    changeEventOwner( event.id, newOwner );
                },
            }); 
            
            addToolTipToEvent(element,event);
        }
          
    }

</script>

<apex:include pageName="fullcalStyle" />

</apex:page>


<!--	--Class--	-->

public with sharing class fullcalUser {
     
    public String recentGroup { get { return pref.recentGroup; }}
    public String recentView { get { return pref.recentView; }}
    public CollaborationGroup selectedGroup { get; private set;}    
    public Event editEvent { get; set; } { editEvent = new Event(); }
    Public String getWhoId{get;set;}
    Public Contact c{get;set;}
    public String Cid{get; set;}
    
            public fullcalUser(ApexPages.StandardController controller) {
            
            Cid = ApexPages.currentPage().getParameters().get('Id'); 
            c=[Select id,Name from Contact where id=: Cid];
            getWhoId=c.name;
        
        }
        public fullcalUser() { 
        // if the default group is set, fetch the group name as well
        try {
            if ( recentGroup != null ) {
                selectedGroup = [select id,name from CollaborationGroup where id = :recentGroup limit 1];       
            }
        } catch (Exception e) {
            ApexPages.addMessage( new ApexPages.Message(ApexPages.Severity.ERROR, e.getMessage()));
        }
        
        
    }
   
 
    string qstr(string s) { 
        String ret = Apexpages.currentPage().getParameters().get(s) ;
        if (ret != null ) 
            ret = String.escapeSingleQuotes( ret );
        return ret; 
    }
     
// data loading
    public List<fullcalendarEvent> allEvents { set;  
        get {
            if ( allEvents == null ) {
                allEvents = new List<fullcalendarevent>();
                String obj = qstr('groupId'); 
                String idsParam = qstr('id'); 
                
              //  system.debug(LoggingLevel.INFO,obj);
              //  system.debug(LoggingLevel.INFO,idsParam);
                
                // if id is a list of IDS, allow that
                List<string> ids = new List<string>();
                
                if ( obj != null) {
                    for (   CollaborationGroupMember member : [ select MemberId 
                                                                from CollaborationGroupMember 
                                                                where   collaborationGroupId=:obj limit 15])        {
                        ids.add(member.memberid);
                    }
                } else if ( idsParam != null ) {
                    ids = idsParam.split(',');
                } 
                /*else { 
                    System.assert(false,'missing parameter to fullcaluser');
                }*/
                
                
                String st =qstr('start'); 
                if ( st != null ) 
                    startDate = Datetime.newInstance( Long.valueof( st )*1000 );  
                    
                string en =     qstr('end');
                if ( en != null ) 
                    endDate = Datetime.newInstance( Long.valueof( en )*1000 );

                // get a class name for each user
                Map<id,User> classNames = new Map<id,User>([select id, Calendar_Color__c from User where id in :ids]);// LIMIT ?
                
                
                try {
                    for( Event e: [Select e.Subject, e.StartDateTime, e.Id, e.OwnerId, e.Location, 
                                    e.IsRecurrence, e.IsPrivate, e.IsGroupEvent, e.Owner.Name,
                                    e.IsChild, e.IsArchived, e.IsAllDayEvent,  e.GroupEventType, 
                                    e.EndDateTime, e.DurationInMinutes, e.Description, e.who.name, e.what.name,
                                    e.ActivityDateTime, e.ActivityDate,e.Type
                        From Event e
                        where e.ownerid in :ids
                        AND  (e.activitydatetime >= :startDate or (e.IsAllDayEvent = true AND e.activitydate >=:startDate.date() ))
                        and   e.endDateTime <= :endDate 
                        and e.isRecurrence = false
                    //    order by e.activitydatetime
                        ]) {
                            //system.debug(LoggingLevel.INFO,e.isChild);  system.debug(LoggingLevel.INFO,e.IsRecurrence);
                            
                            // to add fields to an event, you must edit fullcalUserData page, 
                            // fullcalendarEvent class, and this list
                            fullcalendarEvent v = new fullcalendarEvent();
                            v.id = e.id;
                            v.title= e.subject;
                            v.description = e.Description;
                            v.url = '/'+e.id;
                            v.whoName = e.who.name!=null?e.who.name:'';
                            // this colors the events by who the owner is 
                            // note: the selector must start with alpha, prepend this
                            v.classname = 'fc-'+e.ownerid; //getClassName( classNames.get(e.OwnerId) );
                            
                            // this colors the events by the type they are   
                            //if (  e.Type != null ) 
                            //  v.classname = e.Type.toLowerCase();
                            
                            v.ownerid = e.OwnerId;
                            v.ownername = e.Owner.Name;
                            v.eventType = e.Type;
                         
                            if ( e.IsAllDayEvent ) {
                                v.allDayDate = e.activityDate;
                                v.endDateTime = e.EndDateTime;
                                v.allDayEvent = e.IsAllDayEvent;    
                            } else {
                                v.startDateTime = e.activityDatetime;
                                v.endDateTime = e.endDateTime;
                            }
                            
                            if ( e.Type == 'Available' ) {
                                v.visible = false;
                                v.editable = false;
                            }
                            allEvents.add( v);
                            
                        }
                    
                    
                } catch (Exception e) {
                    ApexPages.addMessage( new ApexPages.Message(ApexPages.Severity.ERROR, e.getMessage()));
                }
            }
            return allEvents;
        }
    }   
 
 
// called from searchGroup type-ahead support
    public List<CollaborationGroup> allGroups { get{
        if ( allGroups == null ) {
            String term = qstr('term');
            term = '%'+term.trim()+'%';
            allGroups = [select Id,
                    Name,
                    CollaborationType,
                    Description
                    from CollaborationGroup 
                    where name like :term
                    limit 20];
        }
        return allGroups;
    } private set; }
    
    public List<Contact> allWhos { get{
        if ( allWhos == null ) {
            String term = qstr('term');
            term = '%'+term.trim()+'%';
            allWhos = [select Id,
                    Name
                    from Contact 
                    where name like :term
                    limit 50];
        }
        return allWhos;
    } private set; }

// interactions on the page
    public void insertNewEvent() {
        try {
            string title = qstr('title');
           
            String st =qstr('start'); 
            if ( st != null ) 
                startDate = Datetime.newInstance( long.valueof(st) );
                
            string en =     qstr('end');
            if ( en != null ) 
                endDate = Datetime.newInstance(  long.valueof(en) );
    
            string allday = qstr('allDay');
            
        //    system.debug(LoggingLevel.INFO, 'all day '+allday );
         //   system.debug(LoggingLevel.INFO, startDate.format() );                
        //  system.debug(LoggingLevel.INFO, endDate.format() );                
            
            Long duration = (endDate.getTime() - startDate.getTime()) / 60000 ;
            
            Event event = new Event( subject=title );
            if ( allday == 'true' )  { 
                event.isAllDayEvent = true;
                event.ActivityDate = startDate.date();
            } else { 
                event.isAllDayEvent = false; 
                event.ActivityDateTime = startDate; 
                event.DurationInMinutes = duration.intValue();
            }
            
            string ownerId = qstr('ownerId');
            if ( ownerId != null && ownerId != '') {
                event.ownerId = ownerId;
            }
            string whoId = qstr('whoId');
            if ( whoId != null && whoId != '') {
                event.whoid = whoId;
            }

            insert event;
            
         //   system.debug(LoggingLevel.INFO,event);
            
            chatterAboutEvent( new Event[] {event} );
             
        }  catch (Exception e) {
        //  system.debug(LoggingLevel.INFO,e);
            ApexPages.addMessage( new ApexPages.Message(ApexPages.Severity.ERROR, e.getMessage()));
        }
    }
    
    void chatterAboutEvent(Event[] events) {
        Event event = events[0]; 
        event = [ select id,subject,activitydatetime,owner.name,DurationInMinutes from event where id = :event.id limit 1];
        FeedPost fpost = new FeedPost();
        fpost.ParentId = selectedGroup.id; //eg. Opportunity id, custom object id..
        fpost.Body = ' scheduled a new event : '+ event.subject + ' for ' + 
                        event.owner.name + ' \n'+ 
                        ' at '+ event.ActivityDateTime +  // TODO format this better
                        ' for ' + event.DurationInMinutes + ' minutes.';
        fpost.LinkUrl = '/'+event.id;
        fpost.title = event.subject;

        try { 
            // chatter about this new event to the current group 
            insert fpost;
            
        }  catch (Exception e) {
        //  system.debug(LoggingLevel.INFO,e); // can hit this if user is not in the group
            // post to the user instead
            fpost.ParentId = event.OwnerId;
            insert fpost;
        }
    } 
    
    public void saveEvent() {
        // TODO 
        
    }
    
    public void deleteEventById() {
        Id eventId = qstr('eventId');
        try {
            Event eventToUpdate = [select Id from Event where Id = :eventId limit 1];
            delete eventToUpdate;
        }
        catch (Exception e) {
            ApexPages.addMessage( new ApexPages.Message(ApexPages.Severity.ERROR, e.getMessage()));
        }
    }
 
    public void changeEventOwner() {
        Id eventId = qstr('eventId');
        Id newOwner = qstr('ownerId');
        try {
            Event eventToUpdate = [select Id, ownerId from Event   where Id = :eventId limit 1];
            eventToUpdate.ownerId = newOwner;
            update eventToUpdate;
        }
        catch (Exception e) {
            ApexPages.addMessage( new ApexPages.Message(ApexPages.Severity.ERROR, e.getMessage()));
        }
         
    }        
    
    public void updateEventMove() {
        Id eventId = qstr('eventId');
        String dayDelta = qstr('dayDelta');
        String minuteDelta = qstr('minuteDelta');
 
        //system.debug(LoggingLevel.INFO, 'all day '+eventId ); system.debug(LoggingLevel.INFO, dayDelta ); system.debug(LoggingLevel.INFO, minuteDelta );                
    
        try {
            Event eventToUpdate = [select Id, activityDateTime,activityDate ,IsAllDayEvent 
                                    from Event   where Id = :eventId limit 1];
            
            if ( eventToUpdate.IsAllDayEvent ) {                                // day event
           //     system.debug(LoggingLevel.INFO, eventToUpdate.activityDate);
           //   system.debug(LoggingLevel.INFO, eventToUpdate.IsAllDayEvent);
                if (dayDelta != '0' && dayDelta != '') {
                    Integer days = Double.valueOf(dayDelta).intValue();
                    eventToUpdate.activityDate = eventToUpdate.activityDate.addDays(days);
                }
            } else {                                                            // time event  
            //  system.debug(LoggingLevel.INFO, eventToUpdate.activityDateTime);
            
                if(minuteDelta != '0' && minuteDelta != '' ){
                    Integer minutes = Double.valueOf(minuteDelta).intValue();
                    eventToUpdate.activityDateTime = eventToUpdate.activityDateTime.addMinutes(minutes);
                }
                if (dayDelta != '0' && dayDelta != '') {
                    Integer days = Double.valueOf(dayDelta).intValue();
                    eventToUpdate.activityDateTime = eventToUpdate.activityDateTime.addDays(days);
                }
            }
               
            update eventToUpdate;
        }
        catch (Exception e) {
            ApexPages.addMessage( new ApexPages.Message(ApexPages.Severity.ERROR, e.getMessage()));
        }
       

    }

    public void viewDisplay() {
        
       // system.debug(LoggingLevel.INFO,'view display '+ qstr('view') );
        pref.saveView( qstr('view') );
    }    
    
    /* change the group that we are looking at, and clear the users list
     * the users is rebuilt on the next getUsers();
     */
    public void selectedGroup() {
        Id param1 = qstr('groupId');
 
        // save their most recent selection in a settings object
        ApexPages.currentPage().getParameters().put('prefspec',param1);
        pref.savePrefs();
        try { 
            selectedGroup = [select id,name from CollaborationGroup where id = :param1 limit 1];
        }
        catch (Exception e) {
            ApexPages.addMessage( new ApexPages.Message(ApexPages.Severity.ERROR, e.getMessage()));
        }
        Users.clear();         
    }
    
    // inner class to add a classname
    public class UserClass { 
        public User u {get; set; } 
        public string classname {get; set; } 
        public string backgroundcolor { get; set; } 
        public string color { get; set; } 
    }
    
    public List<UserClass> Users { get {
        if ( Users.size() > 0 ) { return Users; }
        
        // from the group, list all the users
        Users.clear();
        List<Id> tmp = new List<Id>();
        if ( selectedGroup != null ) {
            for (   CollaborationGroupMember member : [ select MemberId 
                                                        from CollaborationGroupMember 
                                                        where   collaborationGroupId=:selectedGroup.id limit 15])           {
                tmp.add(member.memberid);           
            }
            
            for ( User u :  [select id,name,title,CurrentStatus, SmallPhotoUrl,Calendar_Color__c 
                                from User where id IN :tmp] ) {
                UserClass uc = new UserClass(); 
                uc.u = u;
                uc.backgroundcolor = '#3366CC';
                uc.color = '#fff';
                Chatter_Calendar_Prefs__c s = getBackgroundColor( u);
                if ( s!=null ) {
                    uc.backgroundcolor = s.background_color__c;
                    uc.color = s.color__c;
                }
                uc.classname = 'fc-'+u.id;  
                Users.add( uc );
            }
        }
        // sort the default to the top 
        List<UserClass> sorted = new List<UserClass>();
        string id =             ChatterCalPrefs.getSettings( UserInfo.getUserId() ).Create_New_User__c;
        Integer i =0;
        while(  i< Users.size() ) {
            //UserClass tt = Users.get(i);
            if ( Users.get(i).u.id == id ) {
                break;
            }
            i++;
        } 
        if ( i < Users.size() ) {
            sorted.add(Users.get(i));
            Users.remove(i);
            sorted.addAll( Users );
            Users = sorted;
        }
        
        
        return Users;
        } 
        private set; 
    } { Users= new List<UserClass>(); }

    
    public void updateEventResize() {
        Id eventId = qstr('eventId');
        String minuteDelta = qstr('minuteDelta');

        //system.debug(LoggingLevel.INFO, eventId ); system.debug(LoggingLevel.INFO, dayDelta );  system.debug(LoggingLevel.INFO, minuteDelta );
        
        try {
            Event eventToUpdate = [select Id, EndDateTime from Event   where Id = :eventId limit 1];
            
            if(minuteDelta != '0' && minuteDelta != '' ){
                Integer minutes = Double.valueOf(minuteDelta).intValue();
                eventToUpdate.EndDateTime = eventToUpdate.EndDateTime.addMinutes(minutes);
            }
            
            update eventToUpdate;
            //system.debug(LoggingLevel.INFO, eventToUpdate );
        }
        catch (Exception e) {
            //system.debug(LoggingLevel.INFO, e );
            ApexPages.addMessage( new ApexPages.Message(ApexPages.Severity.ERROR, e.getMessage()));
        }
        
    }
    
    private Chatter_Calendar_Prefs__c getBackgroundColor( User  u ) { 
        Chatter_Calendar_Prefs__c setting = ChatterCalPrefs.getSettings( u.id );
        return setting;
    }
    
    //private string getClassName(User u) {return  u.Calendar_Color__c != null ? u.Calendar_Color__c : 'gray';      }
    private ChatterCalPrefs pref = new ChatterCalPrefs();
    private Datetime startDate { get; set; } { startDate = system.now().addMonths(-1); }
    private Datetime endDate { get; set; }   { endDate = system.now(); }
    

    public void saveColor() { 
        try {
            String uid = qstr('userid'); 
            
            Chatter_Calendar_Prefs__c setting = ChatterCalPrefs.getSettings( uid );
            setting.color__c = qstr('color');
            setting.background_color__c = qstr('background');
            Database.upsert(setting);
            
        } catch (system.exception e) {
            ApexPages.addMessages(e);
        }   
    }
    
    // getDefaultOwner, setDefaultOwner
    
    public void saveNewDefaultOwner() {
        try {
            Chatter_Calendar_Prefs__c setting = ChatterCalPrefs.getSettings( UserInfo.getUserId() ); 
            setting.Create_New_User__c = qstr('ownerId');
            Database.upsert(setting);
            
        } catch (system.exception e) {
            ApexPages.addMessages(e);
        }   
        
    }
    
    /* 
     * building test methods here 
     */
    public static testmethod void t1() { 
        Test.setCurrentPage( Page.FullCalGroup );
        // put in an event
        Event ev = new Event(activityDateTime=System.now());
        ev.DurationInMinutes = 1;
        insert ev;
        ev = [select id,ownerid, activityDateTime, durationInMinutes from event where id = :ev.id limit 1];
        
        Event evallday = new Event(activityDate=System.today());
        evallday.IsAllDayEvent = true;
        insert evallday;
        evallday = [select id,ownerid, activityDate, durationInMinutes,enddatetime from event where id = :evallday.id limit 1];
      //  system.debug(LoggingLevel.INFO, evallday);
        
        ApexPages.currentPage().getParameters().put('id',ev.OwnerId);
        ApexPages.currentPage().getParameters().put('start', 
            string.valueof( ev.ActivityDateTime.addMinutes(-1).getTime()/1000)  );
        ApexPages.currentPage().getParameters().put('end',
            string.valueof( ev.ActivityDateTime.addDays(ev.durationInMinutes+1).getTime()/1000) );
            
       fullcalUser f = new fullcalUser();
        
        map<id,fullcalendarEvent> mymap = new Map<id,fullcalendarEvent>();
        for( fullcalendarEvent ff:f.allEvents ) { mymap.put(ff.id,ff); }
        System.assert( mymap.get(ev.id) != null , 'missin event ');
        System.assert( mymap.get(evallday.id) != null , 'missin event ');
        
      //  system.debug(LoggingLevel.INFO, mymap.get(ev.id));
         
        string uniquename = 'sdlkjsdlsdjflsjdfsdfwieurosdfcxcv'; 
        CollaborationGroup cg = new CollaborationGroup();
        cg.name  = uniquename;
        cg.CollaborationType = 'Public';
        insert cg;
        
        // search for that group
        ApexPages.currentPage().getParameters().put('term',uniquename);
        CollaborationGroup[] gl = f.allGroups;
      //  system.debug(LoggingLevel.INFO, gl);
        system.assert( gl[0].name == uniquename,' missin group');
                
        ApexPages.currentPage().getParameters().put('title',uniquename);
         ApexPages.currentPage().getParameters().put('start', 
            string.valueof( ev.ActivityDateTime.addMinutes(-1).getTime()/1000)  );
        ApexPages.currentPage().getParameters().put('end',
            string.valueof( ev.ActivityDateTime.addDays(ev.durationInMinutes+1).getTime()/1000) );
        
        f.insertNewEvent();
            
        ApexPages.currentPage().getParameters().put('allDay','true');
        f.insertNewEvent();
        // TODO test the above events are created
        
        f.saveEvent(); // more testing 
        
        ApexPages.currentPage().getParameters().put('eventId',ev.id);
        ApexPages.currentPage().getParameters().put('ownerId',Userinfo.getUserId() );
        f.changeEventOwner();
        
        // move a normal event
        ApexPages.currentPage().getParameters().put('eventId',ev.id);
        ApexPages.currentPage().getParameters().put('dayDelta','1');
        ApexPages.currentPage().getParameters().put('minuteDelta','10');
        f.updateEventMove();
        
        // move an all day event 
        ApexPages.currentPage().getParameters().put('eventId',evallday.id);
        ApexPages.currentPage().getParameters().put('dayDelta','1');
        ApexPages.currentPage().getParameters().put('minuteDelta','0');
        f.updateEventMove();
         
     // system.debug(LoggingLevel.INFO, f.recentView);
        ApexPages.currentPage().getParameters().put('view',f.recentView);
        f.viewDisplay();
        
        ApexPages.currentPage().getParameters().put('groupId',cg.id);
        f.selectedGroup();
        system.assert(f.selectedGroup.id == cg.id );
        List<UserClass> ul = f.Users;
        system.assert( f.Users == ul );
        
        ApexPages.currentPage().getParameters().put('ownerId','foo');
        f.saveNewDefaultOwner();       
        
        ApexPages.currentPage().getParameters().put('eventId',ev.id);
        ApexPages.currentPage().getParameters().put('minuteDelta','10');
        f.updateEventResize();
        
        Event eventToUpdate = [select Id,DurationInMinutes from Event where Id = :ev.id limit 1];
     //   system.debug(LoggingLevel.INFO, eventToUpdate );
     //   system.assert( eventToUpdate.DurationInMinutes == 11);
        
        f.deleteEventById();
 
        ApexPages.currentPage().getParameters().put('color','foo');
        ApexPages.currentPage().getParameters().put('backgroundcolor','bar');
        
        f.saveColor();       
        return;
               
    }   
}
